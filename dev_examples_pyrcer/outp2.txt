FileAST:  (at None)
  Typedef: StackElementType, [], ['typedef'] (at ff_after.c:1:14)
    TypeDecl: StackElementType, [] (at ff_after.c:1:14)
      IdentifierType: ['char'] (at ff_after.c:1:9)
  Typedef: QueueElementType, [], ['typedef'] (at ff_after.c:2:14)
    TypeDecl: QueueElementType, [] (at ff_after.c:2:14)
      IdentifierType: ['char'] (at ff_after.c:2:9)
  FuncDef:  (at ff_after.c:3:6)
    Decl: convert, [], [], [] (at ff_after.c:3:6)
      FuncDecl:  (at ff_after.c:3:6)
        ParamList:  (at ff_after.c:3:18)
          Decl: thousands, [], [], [] (at ff_after.c:3:18)
            TypeDecl: thousands, [] (at ff_after.c:3:18)
              IdentifierType: ['int'] (at ff_after.c:3:14)
          Decl: hundreds, [], [], [] (at ff_after.c:3:33)
            TypeDecl: hundreds, [] (at ff_after.c:3:33)
              IdentifierType: ['int'] (at ff_after.c:3:29)
          Decl: tens, [], [], [] (at ff_after.c:3:47)
            TypeDecl: tens, [] (at ff_after.c:3:47)
              IdentifierType: ['int'] (at ff_after.c:3:43)
          Decl: ones, [], [], [] (at ff_after.c:3:57)
            TypeDecl: ones, [] (at ff_after.c:3:57)
              IdentifierType: ['int'] (at ff_after.c:3:53)
        TypeDecl: convert, [] (at ff_after.c:3:6)
          IdentifierType: ['void'] (at ff_after.c:3:1)
    Compound:  (at ff_after.c:4:1)
      Decl: num, [], [], [] (at ff_after.c:5:7)
        ArrayDecl: [] (at ff_after.c:5:7)
          PtrDecl: [] (at ff_after.c:5:6)
            TypeDecl: num, [] (at ff_after.c:5:7)
              IdentifierType: ['char'] (at ff_after.c:5:1)
        InitList:  (at ff_after.c:5:16)
          Constant: string, "" (at ff_after.c:5:16)
          Constant: string, "One" (at ff_after.c:5:20)
          Constant: string, "Two" (at ff_after.c:5:27)
          Constant: string, "Three" (at ff_after.c:5:34)
          Constant: string, "Four" (at ff_after.c:5:43)
          Constant: string, "Five" (at ff_after.c:5:51)
          Constant: string, "Six" (at ff_after.c:5:59)
          Constant: string, "Seven" (at ff_after.c:6:9)
          Constant: string, "Eight" (at ff_after.c:6:18)
          Constant: string, "Nine" (at ff_after.c:6:27)
      Decl: for_ten, [], [], [] (at ff_after.c:8:7)
        ArrayDecl: [] (at ff_after.c:8:7)
          PtrDecl: [] (at ff_after.c:8:6)
            TypeDecl: for_ten, [] (at ff_after.c:8:7)
              IdentifierType: ['char'] (at ff_after.c:8:1)
        InitList:  (at ff_after.c:8:20)
          Constant: string, "" (at ff_after.c:8:20)
          Constant: string, "" (at ff_after.c:8:24)
          Constant: string, "Twenty" (at ff_after.c:8:28)
          Constant: string, "Thirty" (at ff_after.c:8:38)
          Constant: string, "Fourty" (at ff_after.c:8:48)
          Constant: string, "Fifty" (at ff_after.c:8:58)
          Constant: string, "Sixty" (at ff_after.c:8:67)
          Constant: string, "Seventy" (at ff_after.c:9:6)
          Constant: string, "Eighty" (at ff_after.c:9:17)
          Constant: string, "Ninty" (at ff_after.c:9:27)
      Decl: af_ten, [], [], [] (at ff_after.c:11:7)
        ArrayDecl: [] (at ff_after.c:11:7)
          PtrDecl: [] (at ff_after.c:11:6)
            TypeDecl: af_ten, [] (at ff_after.c:11:7)
              IdentifierType: ['char'] (at ff_after.c:11:1)
        InitList:  (at ff_after.c:11:19)
          Constant: string, "Ten" (at ff_after.c:11:19)
          Constant: string, "Eleven" (at ff_after.c:11:26)
          Constant: string, "Twelve" (at ff_after.c:11:36)
          Constant: string, "Thirteen" (at ff_after.c:11:46)
          Constant: string, "Fourteen" (at ff_after.c:11:58)
          Constant: string, "Fifteen" (at ff_after.c:12:5)
          Constant: string, "Sixteen" (at ff_after.c:12:16)
          Constant: string, "Seventeen" (at ff_after.c:12:27)
          Constant: string, "Eighteen" (at ff_after.c:12:40)
          Constant: string, "Ninteen" (at ff_after.c:12:52)
      FuncCall:  (at ff_after.c:14:3)
        ID: printf (at ff_after.c:14:3)
        ExprList:  (at ff_after.c:14:10)
          Constant: string, "\nThe year in words is:\n" (at ff_after.c:14:10)
      FuncCall:  (at ff_after.c:16:3)
        ID: printf (at ff_after.c:16:3)
        ExprList:  (at ff_after.c:16:10)
          Constant: string, "%s thousand" (at ff_after.c:16:10)
          ArrayRef:  (at ff_after.c:16:25)
            ID: num (at ff_after.c:16:25)
            ID: thousands (at ff_after.c:16:29)
      If:  (at ff_after.c:17:3)
        BinaryOp: != (at ff_after.c:17:7)
          ID: hundreds (at ff_after.c:17:7)
          Constant: int, 0 (at ff_after.c:17:19)
        FuncCall:  (at ff_after.c:18:5)
          ID: printf (at ff_after.c:18:5)
          ExprList:  (at ff_after.c:18:12)
            Constant: string, " %s hundred" (at ff_after.c:18:12)
            ArrayRef:  (at ff_after.c:18:27)
              ID: num (at ff_after.c:18:27)
              ID: hundreds (at ff_after.c:18:31)
      If:  (at ff_after.c:20:3)
        BinaryOp: != (at ff_after.c:20:7)
          ID: tens (at ff_after.c:20:7)
          Constant: int, 1 (at ff_after.c:20:15)
        FuncCall:  (at ff_after.c:21:5)
          ID: printf (at ff_after.c:21:5)
          ExprList:  (at ff_after.c:21:12)
            Constant: string, " %s %s" (at ff_after.c:21:12)
            ArrayRef:  (at ff_after.c:21:22)
              ID: for_ten (at ff_after.c:21:22)
              ID: tens (at ff_after.c:21:30)
            ArrayRef:  (at ff_after.c:21:37)
              ID: num (at ff_after.c:21:37)
              ID: ones (at ff_after.c:21:41)
        FuncCall:  (at ff_after.c:23:5)
          ID: printf (at ff_after.c:23:5)
          ExprList:  (at ff_after.c:23:12)
            Constant: string, " %s" (at ff_after.c:23:12)
            ArrayRef:  (at ff_after.c:23:19)
              ID: af_ten (at ff_after.c:23:19)
              ID: ones (at ff_after.c:23:26)
  FuncDef:  (at ff_after.c:27:5)
    Decl: main, [], [], [] (at ff_after.c:27:5)
      FuncDecl:  (at ff_after.c:27:5)
        TypeDecl: main, [] (at ff_after.c:27:5)
          IdentifierType: ['int'] (at ff_after.c:27:1)
    Compound:  (at ff_after.c:28:1)
      Decl: year, [], [], [] (at ff_after.c:29:5)
        TypeDecl: year, [] (at ff_after.c:29:5)
          IdentifierType: ['int'] (at ff_after.c:29:1)
      Decl: n1000, [], [], [] (at ff_after.c:30:5)
        TypeDecl: n1000, [] (at ff_after.c:30:5)
          IdentifierType: ['int'] (at ff_after.c:30:1)
      Decl: n100, [], [], [] (at ff_after.c:30:12)
        TypeDecl: n100, [] (at ff_after.c:30:12)
          IdentifierType: ['int'] (at ff_after.c:30:1)
      Decl: n10, [], [], [] (at ff_after.c:30:18)
        TypeDecl: n10, [] (at ff_after.c:30:18)
          IdentifierType: ['int'] (at ff_after.c:30:1)
      Decl: n1, [], [], [] (at ff_after.c:30:23)
        TypeDecl: n1, [] (at ff_after.c:30:23)
          IdentifierType: ['int'] (at ff_after.c:30:1)
      FuncCall:  (at ff_after.c:32:3)
        ID: printf (at ff_after.c:32:3)
        ExprList:  (at ff_after.c:32:10)
          Constant: string, "\nEnter the year (4 digits): " (at ff_after.c:32:10)
      FuncCall:  (at ff_after.c:33:3)
        ID: scanf (at ff_after.c:33:3)
        ExprList:  (at ff_after.c:33:9)
          Constant: string, "%d" (at ff_after.c:33:9)
          UnaryOp: & (at ff_after.c:33:16)
            ID: year (at ff_after.c:33:16)
      If:  (at ff_after.c:35:3)
        BinaryOp: || (at ff_after.c:35:7)
          BinaryOp: > (at ff_after.c:35:7)
            ID: year (at ff_after.c:35:7)
            Constant: int, 9999 (at ff_after.c:35:14)
          BinaryOp: < (at ff_after.c:35:22)
            ID: year (at ff_after.c:35:22)
            Constant: int, 1000 (at ff_after.c:35:29)
        Compound:  (at ff_after.c:36:1)
          FuncCall:  (at ff_after.c:37:5)
            ID: printf (at ff_after.c:37:5)
            ExprList:  (at ff_after.c:37:12)
              Constant: string, "\nError !! The year must contain 4 digits." (at ff_after.c:37:12)
          FuncCall:  (at ff_after.c:38:5)
            ID: exit (at ff_after.c:38:5)
            ExprList:  (at ff_after.c:38:10)
              ID: EXIT_FAILURE (at ff_after.c:38:10)
      Assignment: = (at ff_after.c:41:3)
        ID: n1000 (at ff_after.c:41:3)
        BinaryOp: / (at ff_after.c:41:11)
          ID: year (at ff_after.c:41:11)
          Constant: int, 1000 (at ff_after.c:41:16)
      Assignment: = (at ff_after.c:42:3)
        ID: n100 (at ff_after.c:42:3)
        BinaryOp: / (at ff_after.c:42:12)
          BinaryOp: % (at ff_after.c:42:12)
            ID: year (at ff_after.c:42:12)
            Constant: int, 1000 (at ff_after.c:42:18)
          Constant: int, 100 (at ff_after.c:42:24)
      Assignment: = (at ff_after.c:43:3)
        ID: n10 (at ff_after.c:43:3)
        BinaryOp: / (at ff_after.c:43:10)
          BinaryOp: % (at ff_after.c:43:10)
            ID: year (at ff_after.c:43:10)
            Constant: int, 100 (at ff_after.c:43:15)
          Constant: int, 10 (at ff_after.c:43:20)
      Assignment: = (at ff_after.c:44:3)
        ID: n1 (at ff_after.c:44:3)
        BinaryOp: % (at ff_after.c:44:10)
          BinaryOp: % (at ff_after.c:44:10)
            ID: year (at ff_after.c:44:10)
            Constant: int, 10 (at ff_after.c:44:15)
          Constant: int, 10 (at ff_after.c:44:19)
      FuncCall:  (at ff_after.c:46:3)
        ID: convert (at ff_after.c:46:3)
        ExprList:  (at ff_after.c:46:11)
          ID: n1000 (at ff_after.c:46:11)
          ID: n100 (at ff_after.c:46:18)
          ID: n10 (at ff_after.c:46:24)
          ID: n1 (at ff_after.c:46:29)
      Return:  (at ff_after.c:48:1)
        Constant: int, 0 (at ff_after.c:48:8)
AST type <class 'pycparser.c_ast.FileAST'>
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', 'attr_names', 'children', 'coord', 'ext', 'show']
