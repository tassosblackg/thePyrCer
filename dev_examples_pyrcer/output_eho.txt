FileAST: 
  FuncDef: 
    Decl: convert, [], [], []
      FuncDecl: 
        ParamList: 
          Decl: thousands, [], [], []
            TypeDecl: thousands, []
              IdentifierType: ['int']
          Decl: hundreds, [], [], []
            TypeDecl: hundreds, []
              IdentifierType: ['int']
          Decl: tens, [], [], []
            TypeDecl: tens, []
              IdentifierType: ['int']
          Decl: ones, [], [], []
            TypeDecl: ones, []
              IdentifierType: ['int']
        TypeDecl: convert, []
          IdentifierType: ['void']
    Compound: 
      Decl: num, [], [], []
        ArrayDecl: []
          PtrDecl: []
            TypeDecl: num, []
              IdentifierType: ['char']
        InitList: 
          Constant: string, ""
          Constant: string, "One"
          Constant: string, "Two"
          Constant: string, "Three"
          Constant: string, "Four"
          Constant: string, "Five"
          Constant: string, "Six"
          Constant: string, "Seven"
          Constant: string, "Eight"
          Constant: string, "Nine"
      Decl: for_ten, [], [], []
        ArrayDecl: []
          PtrDecl: []
            TypeDecl: for_ten, []
              IdentifierType: ['char']
        InitList: 
          Constant: string, ""
          Constant: string, ""
          Constant: string, "Twenty"
          Constant: string, "Thirty"
          Constant: string, "Fourty"
          Constant: string, "Fifty"
          Constant: string, "Sixty"
          Constant: string, "Seventy"
          Constant: string, "Eighty"
          Constant: string, "Ninty"
      Decl: af_ten, [], [], []
        ArrayDecl: []
          PtrDecl: []
            TypeDecl: af_ten, []
              IdentifierType: ['char']
        InitList: 
          Constant: string, "Ten"
          Constant: string, "Eleven"
          Constant: string, "Twelve"
          Constant: string, "Thirteen"
          Constant: string, "Fourteen"
          Constant: string, "Fifteen"
          Constant: string, "Sixteen"
          Constant: string, "Seventeen"
          Constant: string, "Eighteen"
          Constant: string, "Ninteen"
      FuncCall: 
        ID: printf
        ExprList: 
          Constant: string, "\nThe year in words is:\n"
      FuncCall: 
        ID: printf
        ExprList: 
          Constant: string, "%s thousand"
          ArrayRef: 
            ID: num
            ID: thousands
      If: 
        BinaryOp: !=
          ID: hundreds
          Constant: int, 0
        FuncCall: 
          ID: printf
          ExprList: 
            Constant: string, " %s hundred"
            ArrayRef: 
              ID: num
              ID: hundreds
      If: 
        BinaryOp: !=
          ID: tens
          Constant: int, 1
        FuncCall: 
          ID: printf
          ExprList: 
            Constant: string, " %s %s"
            ArrayRef: 
              ID: for_ten
              ID: tens
            ArrayRef: 
              ID: num
              ID: ones
        FuncCall: 
          ID: printf
          ExprList: 
            Constant: string, " %s"
            ArrayRef: 
              ID: af_ten
              ID: ones
  FuncDef: 
    Decl: main, [], [], []
      FuncDecl: 
        TypeDecl: main, []
          IdentifierType: ['int']
    Compound: 
      Decl: year, [], [], []
        TypeDecl: year, []
          IdentifierType: ['int']
      Decl: n1000, [], [], []
        TypeDecl: n1000, []
          IdentifierType: ['int']
      Decl: n100, [], [], []
        TypeDecl: n100, []
          IdentifierType: ['int']
      Decl: n10, [], [], []
        TypeDecl: n10, []
          IdentifierType: ['int']
      Decl: n1, [], [], []
        TypeDecl: n1, []
          IdentifierType: ['int']
      FuncCall: 
        ID: printf
        ExprList: 
          Constant: string, "\nEnter the year (4 digits): "
      FuncCall: 
        ID: scanf
        ExprList: 
          Constant: string, "%d"
          UnaryOp: &
            ID: year
      If: 
        BinaryOp: ||
          BinaryOp: >
            ID: year
            Constant: int, 9999
          BinaryOp: <
            ID: year
            Constant: int, 1000
        Compound: 
          FuncCall: 
            ID: printf
            ExprList: 
              Constant: string, "\nError !! The year must contain 4 digits."
          FuncCall: 
            ID: exit
            ExprList: 
              ID: EXIT_FAILURE
      Assignment: =
        ID: n1000
        BinaryOp: /
          ID: year
          Constant: int, 1000
      Assignment: =
        ID: n100
        BinaryOp: /
          BinaryOp: %
            ID: year
            Constant: int, 1000
          Constant: int, 100
      Assignment: =
        ID: n10
        BinaryOp: /
          BinaryOp: %
            ID: year
            Constant: int, 100
          Constant: int, 10
      Assignment: =
        ID: n1
        BinaryOp: %
          BinaryOp: %
            ID: year
            Constant: int, 10
          Constant: int, 10
      FuncCall: 
        ID: convert
        ExprList: 
          ID: n1000
          ID: n100
          ID: n10
          ID: n1
      Return: 
        Constant: int, 0
AST type <class 'pycparser.c_ast.FileAST'>
